// File: CPU.hdl
// Author: Joseph Quismorio
// Date: 09/13/2021
// Section: 504
// E-mail: jfquismorio@tamu.edu 
// Description: Hack CPU

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	Not(in=instruction[15], out=ni); //get instruction 
	
	//determine if C-instruction or destination go to a-register
	And(a=instruction[15], b=instruction[5], out=ALUA); 
	Mux16(a=instruction, b=outALU, sel=ALUA, out=Aregout); 

	Or(a=ni, b=ALUA, out=loadAReg); //load A to A-reg for A-instructions, or C-instructions or dest in case of that
	ARegister(in=Aregout, load=loadAReg, out=outA);

	Mux16(a=outA, b=inM, sel=instruction[12], out=outAM); //choose between A or M given the A-bit as select bit

	And(a=instruction[15], b=instruction[4], out=loadDreg);
	DRegister(in=outALU, load=loadDreg, out=outD); //load D reg bit into ALU
	
	ALU(x=outD, y=outAM, out=outALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=outZR, ng=outNG); //calculation via ALU 

	Or16(a=false, b=outA, out[0..14]=addressM); //write out to addressM
	Or16(a=false, b=outALU, out=outM); //write out to outM
	And(a=instruction[15], b=instruction[3], out=writeM); //write out to writeM
    	
	Or(a=outZR, b=outNG, out=ZRorNG); //create case for non zero, non negative input
	Not(in=ZRorNG, out=pos);
   
	And(a=pos, b=instruction[0], out=jgt); //if greater than 0, jump to instruction
	And(a=outZR, b=instruction[1], out=jeq); //if equal to 0, jump to instruction
	And(a=outNG, b=instruction[2], out=jlt); //if less than 0, jump to instruction
	
	Or(a=jeq, b=jlt, out=jle); //if less than or equal to 0, jump
	Or(a=jle, b=jgt, out=jump); //run PC if condition is met
	
	And(a=instruction[15], b=jump, out=outPC); //jump if it is C-condition
	Not(in=outPC, out=incPC); //increment if not outPC
	PC(in=outA, load=outPC, inc=incPC, reset=reset, out[0..14]=pc); //load into pc
	
}