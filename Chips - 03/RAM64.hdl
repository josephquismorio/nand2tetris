// File: RAM64.hdl
// Author: Joseph Quismorio
// Date: 09/27/2021
// Section: 504
// E-mail: jfquismorio@tamu.edu 
// Description: 64 16-bit register memory

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
	DMux8Way (in=load, sel=address[3..5], a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h); //use demultiplexer to determine what loads are for register using the 4th-6th address bits
	RAM8 (in=in, load=a, address=address[0..2], out=outA); //account for the RAM8 memory, using the 1st-3rd input address bits as the address
	RAM8 (in=in, load=b, address=address[0..2], out=outB);
	RAM8 (in=in, load=c, address=address[0..2], out=outC);
	RAM8 (in=in, load=d, address=address[0..2], out=outD);
	RAM8 (in=in, load=e, address=address[0..2], out=outE);
	RAM8 (in=in, load=f, address=address[0..2], out=outF);
	RAM8 (in=in, load=g, address=address[0..2], out=outG);
	RAM8 (in=in, load=h, address=address[0..2], out=outH);
	Mux8Way16 (sel=address[3..5], a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, out=out); //determine output using multiplexer

}